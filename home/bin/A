#!/bin/bash

# use of the 'script' commend found here:
#  https://stackoverflow.com/questions/1401002/how-to-trick-an-application-into-thinking-its-stdout-is-a-terminal-not-a-pipe

# Parse flags
use_banner=0
while [[ $1 =~ ^-.* ]]; do
  if [[ "$1" == "--banner" || "$1" == "-b" ]]; then
    [[ -n "$(which figlet)" ]] && use_banner=1
    shift
  fi
done

if (( use_banner )); then
  binary=$1
  figlet -w $(tput cols) -c " -x-x-x-  ${binary##*/}  -x-x-x- "
fi

declare -a args
for arg in "$@"; do
  if [[ "${arg}" =~ \  ]]; then
    args+=( "'${arg}'" )
  else
    args+=( "${arg}" )
  fi
done

echo -e "\e[0;44mExecuting: \e[1;37m${args[*]}\e[0m"
REAL_PATH="$(realpath "${PWD}")"
if [[ "${REAL_PATH}" != "${PWD}" ]]; then
   echo -e "\e[0;46mRun in \e[1;37m${REAL_PATH}\e[0m"
   cd "${REAL_PATH}"
fi
echo ""  # newline

# TODO: stdbuf seems to interfere with the resolution of glibc...
# stdbuf -oL -eL time script --return --quiet --flush --command "$(printf "%q " "$@")" |& ${HOME}/bin/clarify
# stdbuf -o0 -e0 time "$@" |& ${HOME}/bin/clarify
"$@" |& ${HOME}/bin/clarify
readonly rc=${PIPESTATUS[0]}
date
if (( rc == 0 )); then
  echo -e "\e[0;32mDone: \e[1;37m${args[*]}\e[0m\n"
else
  echo -e "\e[0;93mFailed [${rc}]: \e[1;37m${args[*]}\e[0m\n"
fi
exit $rc
